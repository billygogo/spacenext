---
description:
globs:
alwaysApply: true
---
# 기술 요구사항 문서 (TRD)

## 1. 기술 요약 (Executive Technical Summary)

*   **프로젝트 개요**: space.NEXT는 단일 회의실 및 라운지 예약을 위한 웹 기반 시스템으로, 사용자에게는 간편한 예약 및 비대면 입장을, 운영자에게는 자동화된 공간 관리를 제공합니다. 본 시스템은 운영 개입을 최소화하고 사용자 편의성을 극대화하는 데 중점을 둡니다.
*   **핵심 기술 스택**: 프론트엔드는 Next.js, TypeScript, Tailwind CSS를 사용하고, 백엔드는 Supabase(PostgreSQL, 인증, 스토리지 포함)를 활용합니다. 결제는 Stripe를 통합하며, 인프라는 Vercel과 Cloudflare CDN을 사용합니다. 알림은 카카오 알림톡 또는 이메일을 통해 발송됩니다.
*   **주요 기술 목표**:
    *   예약 및 결제 응답 시간 2초 이내 달성
    *   고객 및 결제 정보의 강력한 암호화 및 보안 유지
    *   모바일 우선 반응형 디자인 구현 및 PC 호환성 확보
    *   동시 예약 방지를 위한 데이터 무결성 보장
*   **핵심 기술 가정**:
    *   Supabase는 인증, 데이터베이스, 스토리지 요구사항을 충분히 충족할 수 있습니다.
    *   Stripe는 결제 처리 및 환불 기능을 안정적으로 제공합니다.
    *   Vercel과 Cloudflare CDN은 빠른 배포 및 안정적인 서비스 제공을 지원합니다.
    *   카카오 알림톡 또는 이메일 서비스는 예약 안내 및 리마인더 발송에 적합합니다.

## 2. 기술 스택 (Tech Stack)

| Category | Technology / Library | Reasoning (Why it's chosen for this project) |
| :------- | :------------------- | :------------------------------------------- |
| 프론트엔드 | Next.js | SSR/SSG 지원으로 SEO 및 초기 로딩 속도에 유리하며, 파일 기반 라우팅으로 개발 생산성이 높습니다. |
| 프론트엔드 | TypeScript | 타입 안정성을 제공하여 개발 중 오류를 줄이고 코드 유지보수성을 향상시킵니다. |
| 프론트엔드 | Tailwind CSS | 유틸리티 우선 CSS 프레임워크로, 빠르고 일관된 UI 개발을 가능하게 합니다. |
| 백엔드/DB | Supabase | PostgreSQL 기반의 BaaS(Backend as a Service)로, 인증, 데이터베이스, 스토리지 기능을 한 번에 제공하여 개발 속도를 높이고 운영 부담을 줄입니다. |
| 결제 | Stripe | 글로벌 표준 결제 솔루션으로, 안정적인 결제 처리 및 다양한 결제 수단을 지원합니다. |
| 인프라 | Vercel | Next.js에 최적화된 배포 플랫폼으로, 빠르고 간편한 CI/CD 및 CDN 통합을 제공합니다. |
| 인프라 | Cloudflare CDN | Vercel과 연동하여 정적 자산 캐싱 및 보안을 강화하여 서비스 응답 속도를 향상시킵니다. |
| 알림 | 카카오 알림톡 / 이메일 서비스 | 사용자에게 예약 확정, 입장 안내, 리마인더 등 중요한 정보를 효율적으로 전달하기 위함입니다. (구체적인 서비스는 개발 단계에서 선정) |

## 3. 시스템 아키텍처 설계 (System Architecture Design)

### 최상위 빌딩 블록 (Top-Level building blocks)

*   **클라이언트 (Client)**: 사용자가 직접 상호작용하는 웹 애플리케이션입니다. Next.js로 개발되며, 예약 선택, 결제, 예약 내역 확인 등의 기능을 제공합니다.
*   **백엔드 API (Backend API)**: 클라이언트의 요청을 처리하고 데이터베이스와 상호작용하는 핵심 로직입니다. Supabase의 API Gateway를 통해 제공됩니다.
*   **데이터베이스 (Database)**: 모든 예약 정보, 사용자 정보, 공간 설정 등을 저장합니다. Supabase의 PostgreSQL 데이터베이스를 사용합니다.
*   **인증 서비스 (Authentication Service)**: 사용자 로그인 및 세션 관리를 담당합니다. Supabase Auth를 활용합니다.
*   **결제 게이트웨이 (Payment Gateway)**: 결제 요청을 처리하고 실제 결제를 수행합니다. Stripe API를 통해 연동됩니다.
*   **알림 서비스 (Notification Service)**: 예약 확정, 입장 안내, 리마인더 등의 알림을 사용자에게 발송합니다. 카카오 알림톡 또는 이메일 발송 API를 사용합니다.

### 최상위 구성 요소 상호작용 다이어그램 (Top-Level Component Interaction Diagram)

```mermaid
graph TD
    A[사용자/운영자] -->|웹 브라우저| B[클라이언트 (Next.js)]
    B -->|API 요청| C[Supabase API Gateway]
    C -->|인증| D[Supabase Auth]
    C -->|데이터 쿼리| E[Supabase PostgreSQL DB]
    C -->|스토리지| F[Supabase Storage]
    C -->|결제 요청| G[Stripe API]
    C -->|알림 요청| H[알림 서비스 (카카오 알림톡/이메일)]
    G -->|결제 결과| C
    H -->|알림 발송| A
```

*   **사용자/운영자**는 웹 브라우저를 통해 **클라이언트(Next.js)**에 접속하여 서비스를 이용합니다.
*   **클라이언트**는 모든 데이터 및 기능 요청을 **Supabase API Gateway**를 통해 백엔드로 전달합니다.
*   **Supabase API Gateway**는 요청에 따라 **Supabase Auth**를 통한 인증, **Supabase PostgreSQL DB**와의 데이터 상호작용, **Supabase Storage**를 통한 파일 관리, **Stripe API**를 통한 결제 처리, 그리고 **알림 서비스**를 통한 알림 발송을 조율합니다.

### 코드 구성 및 규칙 (Code Organization & Convention)

**도메인 주도 조직 전략 (Domain-Driven Organization Strategy)**

*   **도메인 분리**: 비즈니스 도메인(예: `예약`, `사용자`, `결제`, `관리자`)별로 코드를 분리하여 응집도를 높이고 독립적인 개발을 용이하게 합니다.
*   **계층 기반 아키텍처**: 각 도메인 내에서 프레젠테이션, 비즈니스 로직, 데이터 접근 계층을 명확히 분리하여 관심사를 분리하고 유지보수성을 향상시킵니다.
*   **기능 기반 모듈**: 특정 기능(예: `예약 생성`, `예약 취소`, `결제 처리`)과 관련된 모든 파일(컴포넌트, 훅, API 호출 등)을 하나의 모듈로 묶어 관련성을 명확히 합니다.
*   **공유 컴포넌트**: 공통으로 사용되는 유틸리티 함수, 타입 정의, 재사용 가능한 UI 컴포넌트 등은 별도의 공유 모듈에 배치하여 중복을 줄입니다.

**범용 파일 및 폴더 구조 (Universal File & Folder Structure)**

```
/
├── app/                  # Next.js 앱 라우터 (페이지, 레이아웃, API 라우트)
│   ├── (auth)/           # 인증 관련 페이지 (로그인, 회원가입 등)
│   ├── (booking)/        # 예약 관련 페이지 (예약 달력, 예약 상세 등)
│   ├── (admin)/          # 관리자 대시보드 페이지
│   ├── api/              # Next.js API 라우트 (서버리스 함수)
│   │   ├── auth/
│   │   ├── booking/
│   │   └── payment/
│   ├── layout.tsx        # 전역 레이아웃
│   └── page.tsx          # 메인 페이지
├── components/           # 재사용 가능한 UI 컴포넌트
│   ├── ui/               # Tailwind CSS 기반의 기본 UI 컴포넌트 (버튼, 입력 필드 등)
│   ├── common/           # 애플리케이션 전반에 사용되는 공통 컴포넌트 (헤더, 푸터 등)
│   └── domain/           # 특정 도메인에 특화된 컴포넌트 (예: BookingCalendar)
├── lib/                  # 클라이언트/서버 공통 유틸리티 함수 및 헬퍼
│   ├── supabase/         # Supabase 클라이언트 초기화 및 헬퍼
│   ├── stripe/           # Stripe 관련 헬퍼 함수
│   ├── utils/            # 일반 유틸리티 함수 (날짜 포맷, 가격 계산 등)
│   └── types/            # 전역 타입 정의
├── hooks/                # 재사용 가능한 React 훅
├── styles/               # 전역 스타일 및 Tailwind CSS 설정
├── public/               # 정적 자산 (이미지, 폰트 등)
├── .env.local            # 환경 변수
├── next.config.js        # Next.js 설정
├── package.json          # 프로젝트 의존성
└── tsconfig.json         # TypeScript 설정
```

### 데이터 흐름 및 통신 패턴 (Data Flow & Communication Patterns)

*   **클라이언트-서버 통신**:
    *   Next.js의 서버 컴포넌트 또는 API 라우트를 통해 Supabase API Gateway와 통신합니다.
    *   데이터 조회는 주로 `GET` 요청을 사용하며, 데이터 생성/수정/삭제는 `POST`, `PUT`, `DELETE` 요청을 사용합니다.
    *   Supabase SDK를 사용하여 데이터베이스 쿼리 및 인증 관련 작업을 수행합니다.
*   **데이터베이스 상호작용**:
    *   Supabase의 PostgreSQL 데이터베이스를 직접 쿼리하거나, Supabase에서 제공하는 ORM(Object-Relational Mapping)과 유사한 클라이언트 라이브러리를 사용하여 데이터를 조작합니다.
    *   예약 시간 중복 방지를 위해 데이터베이스 레벨에서 `UNIQUE` 제약 조건 또는 트랜잭션을 활용합니다.
*   **외부 서비스 통합**:
    *   **Stripe**: 클라이언트에서 결제 정보를 입력받아 Next.js API 라우트를 통해 Stripe API로 결제 요청을 보냅니다. Stripe 웹훅을 사용하여 결제 성공/실패 알림을 받아 데이터베이스에 반영합니다.
    *   **알림 서비스**: 예약 확정, 입장 안내, 리마인더 등의 이벤트 발생 시 Next.js API 라우트에서 알림 서비스(카카오 알림톡/이메일)의 API를 호출하여 메시지를 발송합니다.
*   **실시간 통신**: 현재 요구사항에는 실시간 통신이 명시되어 있지 않으므로, 초기 MVP에서는 구현하지 않습니다. 향후 필요 시 Supabase Realtime 기능을 고려할 수 있습니다.
*   **데이터 동기화**: 예약 데이터는 Supabase PostgreSQL DB에 저장되며, 모든 클라이언트 및 관리자 대시보드는 이 단일 소스를 통해 데이터를 조회하고 업데이트합니다. 예약 시간 중복 방지를 위해 DB 트랜잭션 및 제약 조건을 활용하여 데이터 일관성을 유지합니다.

## 4. 성능 및 최적화 전략 (Performance & Optimization Strategy)

*   **Next.js 최적화**: SSR/SSG를 활용하여 초기 로딩 속도를 최적화하고, 이미지 최적화(`next/image`), 코드 스플리팅을 통해 번들 크기를 줄여 사용자 경험을 향상시킵니다.
*   **데이터베이스 쿼리 최적화**: Supabase PostgreSQL에서 효율적인 인덱스를 설계하고, 필요한 데이터만 조회하도록 쿼리를 최적화하여 데이터베이스 응답 시간을 단축합니다.
*   **CDN 활용**: Vercel과 Cloudflare CDN을 통해 정적 자산(이미지, CSS, JS)을 캐싱하여 사용자에게 더 빠르게 전달하고, 서버 부하를 줄입니다.
*   **API 응답 시간 단축**: Next.js API 라우트에서 불필요한 연산을 최소화하고, 외부 서비스(Stripe, 알림 서비스)와의 통신 지연을 고려하여 비동기 처리를 효율적으로 구현합니다.

## 5. 구현 로드맵 및 마일스톤 (Implementation Roadmap & Milestones)

### 1단계: 기반 구축 (MVP 구현) (Phase 1: Foundation (MVP Implementation))

*   **핵심 인프라**: Vercel 배포 설정, Supabase 프로젝트 초기화 (DB, Auth), Cloudflare CDN 연동.
*   **필수 기능 구현 우선순위**:
    1. 예약 가능 날짜 조회 기능 (달력 기반 UI)
    2. 시간 선택 기능 (예약 가능한 시간대 선택)
*   **기본 보안**: Supabase Row Level Security (RLS) 설정, 환경 변수 관리. 로그인(인증) 기능은 핵심 예약/조회 기능 이후 단계적으로 적용.
    4. 예약 현황 조회 기능 (사용자/관리자)
    
    이후 로그인(인증) 기능을 연동하여 예약 및 조회 액션에 인증을 추가합니다.
    *   가격 자동 계산, 실시간 예약 가능 여부 표시는 위 기능 구현 이후에 적용
*   **기본 보안**: Supabase Row Level Security (RLS) 설정, 환경 변수 관리.
*   **개발 환경 설정**: 개발 환경 구성, Git 저장소 설정, 기본 CI/CD 파이프라인 구축.
*   **예상 완료 시점**: 1-2주차

### 2단계: 기능 강화 (Phase 2: Feature Enhancement)

*   **고급 기능**:
    *   사용자: Stripe 결제 연동, 결제 완료 후 예약 상태 변경 ("confirmed"), 예약 내역 확인 페이지 (링크 기반), 예약 취소 기능 (환불 정책 적용).
    *   관리자: 예약 수동 등록/수정 기능.
*   **성능 최적화**: Next.js 이미지 최적화, Supabase 쿼리 최적화.
*   **강화된 보안**: 결제 정보 암호화 (Stripe 처리), 민감 데이터 접근 제어 강화.
*   **모니터링 구현**: Vercel 및 Supabase 기본 로깅 및 모니터링 설정.
*   **예상 완료 시점**: 3-5주차

### 3단계: 확장 및 최적화 (Phase 3: Scaling & Optimization)

*   **확장성 구현**:
    *   사용자: QR 또는 도어락 비밀번호 자동 발송 연동 (외부 API 연동), 입장 시각 10분 전 리마인드 알림 발송.
    *   관리자: 운영 시간, 이용 요금, 취소 정책 설정 기능.
*   **고급 통합**: 카카오 알림톡 또는 이메일 서비스 연동.
*   **엔터프라이즈 기능**: 동시 예약 방지 로직 강화 (DB 트랜잭션, 락), 노쇼 방지 로직 (선결제, 리마인더).
*   **규정 준수 및 감사**: 개인정보 처리 방침 및 환불 정책 명시, 관련 법규 준수 검토.
*   **예상 완료 시점**: 6-8주차

## 6. 위험 평가 및 완화 전략 (Risk Assessment & Mitigation Strategies)

### 기술적 위험 분석 (Technical Risk Analysis)

*   **기술 위험**:
    *   **잠재적 문제**: Supabase의 특정 기능(예: 복잡한 쿼리, 웹훅 처리)이 요구사항을 완전히 충족하지 못할 수 있습니다.
    *   **완화 전략**: Supabase 문서 및 커뮤니티를 적극 활용하고, 필요한 경우 PostgreSQL의 원시 쿼리 또는 Supabase Edge Functions를 사용하여 커스텀 로직을 구현합니다.
*   **성능 위험**:
    *   **잠재적 문제**: 동시 접속자 증가 시 예약 시스템의 응답 속도가 저하될 수 있습니다.
    *   **완화 전략**: 데이터베이스 인덱스 최적화, 캐싱 전략 도입 (Next.js 캐싱, Cloudflare CDN), Supabase의 성능 모니터링을 통해 병목 현상을 조기에 식별하고 대응합니다.
*   **보안 위험**:
    *   **잠재적 문제**: 고객 정보 및 결제 정보 유출, 무단 접근.
    *   **완화 전략**: Supabase RLS를 통한 데이터 접근 제어, Stripe를 통한 결제 정보 직접 처리(서버에 저장하지 않음), 모든 통신에 HTTPS 적용, 정기적인 보안 취약점 점검.
*   **통합 위험**:
    *   **잠재적 문제**: Stripe, 카카오 알림톡/이메일 서비스 등 외부 API 연동 시 예상치 못한 오류 또는 서비스 중단.
    *   **완화 전략**: 외부 API 연동 시 오류 처리 및 재시도 로직 구현, 폴백(fallback) 메커니즘 마련 (예: 알림톡 실패 시 이메일 발송), 외부 서비스의 상태 모니터링.

### 프로젝트 전달 위험 (Project Delivery Risks)

*   **일정 위험**:
    *   **잠재적 문제**: 개발 일정 지연으로 인한 출시일 준수 어려움.
    *   **완화 전략**: 애자일 방법론을 적용하여 스프린트 단위로 개발하고, 주간 진행 상황을 공유하며, 우선순위가 낮은 기능은 다음 단계로 이월하여 MVP를 먼저 출시합니다.
*   **자원 위험**:
    *   **잠재적 문제**: 개발 인력 부족 또는 특정 기술 전문성 부족.
    *   **완화 전략**: Supabase와 Next.js 등 검증된 기술 스택을 사용하여 개발 복잡도를 낮추고, 필요한 경우 외부 전문가의 자문을 구하거나 오픈 소스 커뮤니티의 도움을 받습니다.
*   **품질 위험**:
    *   **잠재적 문제**: 버그 발생, 기능 오작동, 사용자 경험 저하.
    *   **완화 전략**: 단위 테스트 및 통합 테스트를 통해 코드 품질을 확보하고, 사용자 시나리오 기반의 QA를 철저히 수행하며, 출시 전 베타 테스트를 통해 실제 사용자 피드백을 반영합니다.
*   **배포 위험**:
    *   **잠재적 문제**: 프로덕션 환경 배포 시 예상치 못한 문제 발생.
    *   **완화 전략**: 개발/스테이징/프로덕션 환경을 분리하고, Vercel의 자동 배포 기능을 활용하여 배포 프로세스를 간소화하며, 롤백 계획을 수립하여 문제 발생 시 신속하게 이전 버전으로 복구할 수 있도록 합니다.
